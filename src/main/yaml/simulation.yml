incarnation: protelis

variables:
  meanTaskSize: &meanTaskSize
    type: ArbitraryVariable
    parameters: [1000, [1, 10, 100, 1000, 10000]]
  serverCount: &serverCount
    formula: 10
  desktopCount: &desktopCount
    formula: 25
  socCount: &socCount
    formula: 100
  maxTasks: &maxTasks
    formula: 20
  baseFrequency: &baseFrequency
    formula: 0.001
  peakFrequency: &peakFrequency
    type: ArbitraryVariable
    parameters: [1, [0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1]]
  # Traffic peak
  peakStart: &peakStart
    formula: 100
  peakDuration:
    formula: 300
  peakEnd: &peakEnd
    formula: peakStart + peakDuration
  stabilizationTime:
    formula: 200
  simulationEnd: &simulationEnd
    formula: peakEnd + stabilizationTime
  # Grain size in MIPS
  grain: &grain
    min: 1300
    max: 1700
    step: 100
    default: 1500
  # Low pass filter parameter
  smoothing: &smoothing
    type: ArbitraryVariable
    parameters: [0.1, [0.01, 0.03, 0.1, 0.3, 0.9]]
  debug: &debug
    formula: "false"
  longseed:
    min: 0
    max: 99
    step: 1
    default: -1
  seed:
    min: 0
    max: 9
    step: 1
    default: 0
  actualseed: &seed
    formula: "longseed < 0 ? seed : longseed"

terminate:
  - type: AfterTime
    parameters: [*simulationEnd]

export:
  - time
  - molecule: done
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: drop
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: waiting
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: isLeader
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: capacity
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: freeCapacity
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: maxCapacity
    aggregators: [mean]
    value-filter: onlyfinite

seeds:
  scenario: *seed
  simulation: *seed

network-model:
  type: ConnectWithinDistance
  parameters: [1.5]

sgcg: &sgcg
  - time-distribution: 1
    program: sgcg:sgcg
  - program: send

taskGenerator: &taskGenerator
  - time-distribution:
      type: ExponentialStep
      parameters: [*baseFrequency, *peakFrequency, *peakStart, *peakEnd, 10]
    program: >
      import Task.newTask
      newTask(self.nextRandomDouble() * env.get("meanTaskSize") * self.getDeviceUID().getId(), env.get("maxTasks"))

taskSize: &taskSize
  molecule: meanTaskSize
  concentration: *meanTaskSize
maxTaskPerNode: &maxTaskPerNode
  molecule: maxTasks
  concentration: *maxTasks
grain: &grainSize
  molecule: grain
  concentration: *grain
smoothing: &low-pass
  molecule: alpha
  concentration: *smoothing
debug: &is-debug
  molecule: debug
  concentration: *debug

displacements:
  - in:
      type: CircularArc
      parameters: [*serverCount, 0, 0, 0.5]
    contents:
      - molecule: cpuType
        concentration: "server"
      - *taskSize
      - *maxTaskPerNode
      - *grainSize
      - *low-pass
      - *is-debug
      - molecule: drop
        concentration: 0
    programs:
      - *sgcg
  - in:
      type: CircularArc
      parameters: [*desktopCount, 0, 0, 1.8]
    contents:
      - molecule: cpuType
        concentration: "desktop"
      - *taskSize
      - *maxTaskPerNode
      - *grainSize
      - *low-pass
      - *is-debug
    programs:
      - *sgcg
      - *taskGenerator
  - in:
      type: CircularArc
      parameters: [*socCount, 0, 0, 3]
    contents:
      - molecule: cpuType
        concentration: "soc"
      - molecule: meanTaskSize
        concentration: *meanTaskSize
      - *taskSize
      - *maxTaskPerNode
      - *grainSize
      - *low-pass
      - *is-debug
    programs:
      - *sgcg
      - *taskGenerator
